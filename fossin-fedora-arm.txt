OUTLINE:
A basic hands-on with QEMU/ARM
Current state of affairs with Fedora/ARM
Future plans and ideas



Fedora Embedded and QEMU/ARM
 * Do you know Fedora has an Embedded SIG – Special Interest Group?
 * QEMU can be used to do much of your ARM/Linux prototyping?

What will we cover?
 * About Fedora Embedded SIG
 * ARM architecture in particular
 * QEMU
  * Hands-on with QEMU/ARM
  * Contributing back to Fedora/ARM

Fedora Embedded
 * http://fedoraproject.org/wiki/SIGs/Embedded
 * We aim to accomplish this goal through a variety of activities:
  * Create high quality packages of cross-compilers and related tools.
  * Provide packaging guidelines. 
Targeted platforms
 * ARM
 * AVR32
 * Others

Platform / processor selection
 * Which platform/processor to select for Embedded Linux project?
 * Processor Must be at-least 32bit
 * Should have a MMU
 * Non-MMU based processors can use uclinux ( no-MMU port )
 * Floating point unit is optional, which can be emulated by libraries

Why Fedora on ARM architecture? Multiple reasons!
 * As of 2007, about 98 percent of the more than one billion mobile phones sold each year use at least one ARM processor.
 * As of 2009, ARM processors account for approximately 90% of all embedded 32-bit RISC processors.
 * Over 5 Billion ARM9 processors have been shipped so far 
 * ARM processors to enter server markets!

QEMU
 * What is QEMU and what makes it special for doing embedded systems development?
 * QEMU is an emulator for popular CPU
 * x86, ARM, PowerPC, Sparc32/64, MIPS and ColdFire
 * AVR32 support is in progress at http://repo.or.cz/w/qemu/avr32.git 
 * It also simulates peripheral devices
 * You don't need the actual hardware to do most of the  prototyping and testing
 * Its greener – you don't have to connect too many wires, so it uses lesser power.

Hands on

We will discuss the following:
 * Setting up an ARM toolchain.
 * What happens at system reset?
  * Initialization.
  * Bootloader.
  * Kernel.
  * Initial root filesystem

Toolchains and QEMU/ARM
 * http://fedoraproject.org/wiki/Architectures/ARM/CrossToolchain 
 * A simple program on QEMU/ARM
 * Hands on with bare-hello-world
 * What happens when an ARM based board is powered ON?
 * Startup code
 * Understand the memory map for RAM and ROM
 * First instruction
 * Vector table
 * Stack initialization
 * Relocating the RAM to a different address
 * Running from RAM

Why do we need boot loader?
 * there is a lot of work done by boot loader
 * Kernel assumes that a lot of system initialization is already done:
  * Configure memory sub-system.
  * Load kernel image at the correct memory address
  * Load initial RAM disk ( optional )
  * Initialize boot parameters
  * Obtain the ARM Linux machine type
  * Initialize register variables for entry into kernel
  * writing code for all this is
   * highly error prone, repetitive, cumbersome and boring
 * a readymade bootloader generally just fits in 

Why do we need Linux Kernel?
 * Open Source, of-course
 * Vendor Independence
 * POSIX Compliance
 * Varied Hardware Support
 * Linux kernel has many device drivers already implemented which provide us with device interface.
 * Linux kernel does the grunt work of hardware level interfacing with the devices, so once you write code for one hardware board, it will work on another device with, usually very few changes


Hands on
 * Lets configure a Boot-loader and a kernel
 * Following steps are involved:
 * Compile and configure U-Boot boot-loader
 * Compile and configure Linux Kernel
 * Create a root file-system

Bootloader: U-Boot on QEMU/ARM
 * Install mkimage
  * sudo yum install -y uboot-tools
 * Download the U-Boot source and then:
  * cd /path/to/uboot-source
 * export CROSS_COMPILE=armv5tel-redhat-linux-gnueabi-
 * export ARCH=arm
 * make versatilepb_config

Now boot with the U-Boot boot-loader
 * qemu-system-arm -M versatilepb -m 128M -nographic -kernel u-boot.bin

Linux Kernel on QEMU/ARM:
Download kernel (linux-2.6.33.5):
 * cd linux-2.6.33.5/
 * export CROSS_COMPILE=armv5tel-redhat-linux-gnueabi-
 * export ARCH=arm
 * make versatile_defconfig
 * make xconfig
 * make

Lets test the kernel:
 * qemu-system-arm -M versatilepb -m 128M -kernel arch/arm/boot/zImage

Lets build a Root file-system
Build a very basic root file-system:
 * $(CROSS_COMPILE)gcc -static test.c -o test
 * echo test | cpio -o --format=newc > rootfs

Test the root file-system
 * qemu-system-arm -M versatilepb -m 128M -kernel zImage -initrd rootfs -append "root=/dev/ram rdinit=/test"


Fedora ARM Infrastructure
 * Fedora ARM is currently heavily driven by the Seneca Centre for Development of Open Technology (CDOT) at the School of Computer Studies at Seneca College, Toronto.
  * http://zenit.senecac.on.ca/wiki/index.php/Fedora_ARM_Secondary_Architecture
 * Latest news:
  * http://fedora-arm.blogspot.com/
  * http://paulfedora.wordpress.com/
 * Current status page
  * http://arm.koji.fedoraproject.org/status/


Running Fedora on QEMU/ARM

Detailed instructions at
http://fedoraproject.org/wiki/Architectures/ARM/HowToQemu 
In progress...


Contributing to Fedora/ARM
Understand the koji build system

Fedora ARM Build System
http://zenit.senecac.on.ca/wiki/index.php/Fedora_ARM_Koji_Buildsystem
Recent video by Paul Whalen
http://fsoss.senecac.on.ca/2010/node/24

Bulding packages for Fedora ARM
ARM Koji
arm-koji build --scratch dist-f13 some-package.src.rpm
ARM Koji web interface
More on Howto use koji:
http://fedoraproject.org/wiki/Koji 

How can you contribute?
Issues not yet resolved:
https://bugzilla.redhat.com/show_bug.cgi?id=ARMTracker

More info at:
http://fedoraproject.org/wiki/Architectures/ARM/Team_and_Developers


Questions?

Thank you!


TODO:
ask for help on fedora_arm irc for a workout session
summarize the current state of affairs on Fedora ARM and write them down!
Make a graphical representation of the current status of Fedora/ARM 

NOTES:

http://www.mail-archive.com/arm@lists.fedoraproject.org/msg00295.html

Floating point support in the Fedora/ARM cross toolchain is in progress:
 * discussion is on for which of soft/softfp or hardfp to select for upcoming ARMv7 support
 * OLPCs (currently the only eager to use Fedora ARM for an actual project) 
   but they seem to be aiming to jump from F-11 to F-14
 * 
for their next release, but I don't know if that includes the XO-1.75.

What are the limitions with using QEMU as koji builders?
 * QEMU runs at a fraction of the speed of an actual hardware ( like GuruPlug/SheevaPlug )
 * unless there is hardware virtualization support the speed difference will be significant
 * hardware virtualization will work if the host OS has similar hardware
  * example qemu-system-x86 running on a Fedora-x86 host
 * ARM didn't support hardware virtualization earlier however there is some good news:
  * http://arstechnica.com/business/news/2010/09/arms-eagle-has-landed-meet-the-a15.ars
   * ARM's Eagle -  the A15 architecture will support hardware virtualization
   * this means that the QEMU guests can run almost as good as an actual hardware would


QEMU:
==============================================================================
hw/arm_boot.c:
 
#define KERNEL_ARGS_ADDR 0x100
#define KERNEL_LOAD_ADDR 0x00010000
#define INITRD_LOAD_ADDR 0x00800000

Which all machines/boards are registered inside QEMU?
search for references of C function: qemu_register_machine

hw/versatilepb.c: static void versatile_init(ram_addr_t ram_size,
                     const char *boot_device,
                     const char *kernel_filename, const char *kernel_cmdline,
                     const char *initrd_filename, const char *cpu_model,
                     int board_id)
calls this function:
    env = cpu_init(cpu_model);

which expands to a macro defined here:
target-arm/cpu.h: #define cpu_init cpu_arm_init

and this function gets called
target-arm/helper.c: CPUARMState *cpu_arm_init(const char *cpu_model)


LED Register 0x10000008
 - http://infocenter.arm.com/help/topic/com.arm.doc.dui0224i/Cachbhig.html
 -  only  [7:0] bits of [31:0] total
 -  rest of the [31:8] bits of [31:0] total are reserved

===============================================================================

Why Fedora ARM / RPM packaging?
 proven technology already in use on may of the most popular Distros
 reduce development time and time to market for your next device
 - OLPC is one such example



Fedora ARM Architecture
 - http://fedoraproject.org/wiki/User:Ctyler/Architectures/ARM
 - http://fedoraproject.org/wiki/Architectures/ARM/HowToQemu

RfsBuild - tool to build root filesystem
 - http://fedoraproject.org/wiki/Architectures/ARM/RfsBuild

Koji - the Fedora build system
 - http://fedoraproject.org/wiki/PackageMaintainers/UsingKoji


Anthony Ligouri - QEMU maintainer - http://wiki.qemu.org/ChangeLog
Rusty Russell - http://swtch.com/lguest/

Paul Brook - QEMU ARM creator

Linux on Omap3 - Beagleboard and the like:
 - http://vm-kernel.org/blog/2008/12/15/linux-is-running-on-qemu-omap3/

Embedded work in Qemu
 - http://qemu-forum.ipi.fi/viewtopic.php?f=22&t=2923&sid=fad1398e7ac4b986fa15338e39ec3b29

